<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Estación Meteorológica Reserva Tapichalaca</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Source+Sans+3:wght@300;400;500;600;700&display=swap"
    rel="stylesheet">

  <style>
    :root {
      --primary: #2c6e49;
      --primary-dark: #1a472e;
      --secondary: #588157;
      --light: #f8f9fa;
      --dark: #333;
      --success: #386641;
      --info: #a3b18a;
      --card-bg: rgba(255, 255, 255, 0.95);
      --shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      --border-radius: 12px;
      --card-accent: #333;
      --background: #f8f6f2;
      --temp-color: #e76f51;
      --hum-color: #2a9d8f
      --prec-color: #457b9d;
      --rad-color: #e9c46a;
      --logo-left-height: 80px;
      --logo-left-max-height: 50px;
      --logo-right-height: 80px;
      --logo-right-max-height: 120px;
    }

    body {
      background: linear-gradient(135deg, #f1faee 0%, #e9f5db 100%);
      font-family: 'Source Sans 3', 'Segoe UI', sans-serif;
      padding: 5px 0 15px;
      color: var(--dark);
      min-height: 80vh;
      background-image: url('https://www.transparenttextures.com/patterns/45-degree-fabric-light.png');
      font-size: 0.9rem;
    }

    .app-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 12px;
    }

    .app-overlay {
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      padding: 12px;
      margin-top: 8px;
      border: 1px solid rgba(0, 0, 0, 0.05);
      background-image: linear-gradient(to bottom, #ffffff, #f8fff8);
    }

    .header-section {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      margin-bottom: 8px;
      flex-wrap: wrap;
      gap: 5px;
      padding: 8px 0;
      border-bottom: 2px solid var(--primary);
      position: relative;
      background: linear-gradient(90deg, var(--primary-dark) 0%, var(--primary) 100%);
      border-radius: var(--border-radius);
      padding: 10px;
      color: white;
    }

    .title-container {
      text-align: center;
      grid-column: 2;
    }

    h1 {
      font-size: 1.5rem;
      font-weight: 700;
      color: white;
      margin: 0;
      letter-spacing: -0.2px;
      text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .corner-logo {
      position: absolute;
      top: 10px;
      display: flex;
      align-items: center;
      background: white;
      padding: 5px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .top-left {
      left: 10px;
      height: var(--logo-left-height);
    }

    .top-right {
      right: 10px;
      height: var(--logo-right-height);
    }

    .top-left .logo {
      max-height: var(--logo-left-max-height);
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
      margin: 0 5px;
    }

    .top-right .logo {
      max-height: var(--logo-right-max-height);
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
      margin: 0 5px;
    }

    .subtitle {
      color: rgba(255,255,255,0.9);
      font-size: 0.95rem;
      font-weight: 500;
      margin-top: 4px;
    }

    .form-section {
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      padding: 8px;
      margin-bottom: 8px;
      border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .form-label {
      font-weight: 600;
      color: var(--primary-dark);
      margin-bottom: 3px;
      font-size: 0.9rem;
    }

    .form-select,
    .form-control {
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      padding: 6px 10px;
      font-size: 0.95rem;
      transition: all 0.2s;
      background: rgba(255, 255, 255, 0.9);
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
    }

    .form-select:focus,
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(44, 110, 73, 0.1);
      background: white;
    }

    .btn-success {
      background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
      border: none;
      color: white;
      font-weight: 600;
      font-size: 1rem;
      padding: 6px 12px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
      height: 100%;
      box-shadow: 0 3px 5px rgba(0,0,0,0.1);
    }

    .btn-success:hover {
      background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .btn-primary {
      background: linear-gradient(135deg, #3a7d44 0%, #2d6a36 100%);
      border: none;
      color: white;
      font-weight: 600;
      font-size: 1rem;
      padding: 6px 12px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
      box-shadow: 0 3px 5px rgba(0,0,0,0.1);
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #2d6a36 0%, #3a7d44 100%);
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .data-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      gap: 10px;
      margin-bottom: 15px;
    }

    .card-dark {
      background: white;
      color: var(--dark);
      border-radius: var(--border-radius);
      padding: 12px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0,0,0,0.08);
      display: flex;
      flex-direction: column;
      justify-content: center;
      min-height: 80px;
      position: relative;
      overflow: hidden;
      border: 1px solid rgba(0, 0, 0, 0.05);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      cursor: pointer;
      border-top: 4px solid var(--primary);
    }

    .card-dark:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.12);
    }

    .card-dark .icon {
      font-size: 1.8rem;
      margin-bottom: 5px;
      transition: transform 0.3s ease;
    }

    .card-dark[data-var="airTC"] .icon {
      color: var(--temp-color);
    }

    .card-dark[data-var="rh"] .icon {
      color: var(--hum-color);
    }

    .card-dark[data-var="lluvia"] .icon {
      color: var(--prec-color);
    }

    .card-dark[data-var="slrW"] .icon {
      color: var(--rad-color);
    }

    .card-dark.active .icon {
      transform: scale(1.1);
    }

    .card-dark .main-value {
      font-size: 1.25rem;
      font-weight: 700;
      margin: 3px 0;
      color: var(--primary-dark);
    }

    .card-dark .card-label {
      font-size: 0.9rem;
      color: var(--secondary);
      margin-top: 2px;
      line-height: 1.2;
      font-weight: 500;
    }

    .card-dark .card-time {
      font-size: 0.8rem;
      color: #7f8c8d;
      margin-top: 3px;
      font-weight: 500;
    }

    .chart-container {
      position: relative;
      width: 100%;
      height: 280px;
      background: white;
      border-radius: var(--border-radius);
      padding: 12px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.08);
      margin-bottom: 15px;
      border: 1px solid rgba(0, 0, 0, 0.05);
      overflow: hidden;
      transition: height 0.3s ease;
      border-top: 4px solid var(--primary);
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .chart-title {
      font-size: 1.15rem;
      font-weight: 700;
      color: var(--primary-dark);
    }

    .chart-controls {
      display: flex;
      gap: 8px;
      align-items: center;
    }

    .time-indicator {
      font-size: 0.9rem;
      color: var(--secondary);
      text-align: right;
      margin-top: 5px;
      font-weight: 500;
      padding: 8px;
      background: rgba(44, 110, 73, 0.05);
      border-radius: 8px;
    }

    .footer {
      text-align: center;
      color: var(--secondary);
      font-size: 0.85rem;
      padding: 10px 0 5px;
      margin-top: 15px;
      border-top: 2px solid var(--primary);
      font-weight: 500;
    }

    .info-note {
      font-size: 0.85rem;
      color: #6c757d;
      margin-top: 3px;
      font-style: italic;
    }

    .date-warning {
      background-color: #f8d7da;
      border-left: 4px solid #dc3545;
      padding: 8px;
      border-radius: 8px;
      margin-top: 8px;
      font-size: 0.9rem;
      display: none;
    }

    .date-warning.show {
      display: block;
    }

    .download-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 10px;
      padding: 12px;
      background: rgba(44, 110, 73, 0.05);
      border-radius: 12px;
    }

    .download-control-group {
      display: flex;
      flex-direction: column;
      min-width: 180px;
    }

    .download-label {
      font-weight: 600;
      color: var(--primary-dark);
      margin-bottom: 4px;
      font-size: 0.95rem;
    }

    .download-select {
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      padding: 6px 10px;
      font-size: 0.95rem;
      background: white;
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
    }

    .chart-info-panel {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
      font-size: 0.9rem;
      flex-wrap: wrap;
      padding-top: 10px;
      border-top: 1px solid rgba(0, 0, 0, 0.05);
      gap: 8px;
    }

    .chart-stat {
      padding: 8px 12px;
      border-radius: 8px;
      background: white;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
      min-width: 160px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
      margin: 2px;
      transition: all 0.2s ease;
      border-left: 4px solid;
    }

    .chart-stat:hover {
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .chart-stat.max {
      color: var(--temp-color);
      border-left-color: var(--temp-color);
      background: rgba(231, 111, 81, 0.08);
    }

    .chart-stat.min {
      color: var(--hum-color);
      border-left-color: var(--hum-color);
      background: rgba(42, 157, 143, 0.08);
    }

    .chart-stat.avg {
      color: var(--primary);
      border-left-color: var(--primary);
      background: rgba(44, 110, 73, 0.08);
    }

    .chart-stat.total {
      color: var(--prec-color);
      border-left-color: var(--prec-color);
      background: rgba(69, 123, 157, 0.08);
    }

    .stat-value {
      font-weight: 700;
      font-size: 1.05rem;
    }

    .stat-date {
      font-size: 0.8rem;
      color: #7f8c8d;
      white-space: nowrap;
      margin-left: 8px;
      font-weight: 500;
    }

    .card-dark[data-var="airTC"].active .icon {
      color: var(--temp-color);
      transform: scale(1.1);
    }

    .card-dark[data-var="lluvia"].active .icon {
      color: var(--prec-color);
      transform: scale(1.1);
    }

    .card-dark[data-var="rh"].active .icon {
      color: var(--hum-color);
      transform: scale(1.1);
    }

    .card-dark[data-var="slrW"].active .icon {
      color: var(--rad-color);
      transform: scale(1.1);
    }

    .charts-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
      margin-bottom: 15px;
    }

    .chart-item {
      background: white;
      border-radius: var(--border-radius);
      padding: 12px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.08);
      border: 1px solid rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border-top: 4px solid var(--primary);
    }

    .chart-item:hover {
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.12);
    }

    .chart-item-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
    }

    .chart-item-title {
      font-size: 1.05rem;
      font-weight: 700;
      color: var(--primary-dark);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .chart-item-title i {
      font-size: 1.4rem;
    }

    .chart-wrapper {
      overflow-x: auto;
      overflow-y: hidden;
      padding-bottom: 10px;
    }

    .chart-container {
      min-width: 550px;
    }

    .size-control {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.9rem;
      margin-top: 8px;
      padding: 5px;
      background: rgba(44, 110, 73, 0.05);
      border-radius: 8px;
    }

    .size-label {
      color: var(--secondary);
      white-space: nowrap;
      font-weight: 500;
    }

    .size-slider {
      flex: 1;
      max-width: 150px;
    }

    .chart-date-picker {
      padding: 6px 10px;
      font-size: 0.95rem;
      border-radius: 8px;
      border: 1px solid #e0e0e0;
      background: white;
      min-width: 150px;
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
    }

    .refresh-all-btn {
      background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
      border: none;
      color: white;
      font-weight: 600;
      font-size: 1.05rem;
      padding: 8px 16px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
      box-shadow: 0 3px 5px rgba(0,0,0,0.1);
    }

    .refresh-all-btn:hover {
      background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .date-selector-container {
      display: flex;
      flex-direction: column;
      gap: 8px;
      background: rgba(44, 110, 73, 0.05);
      padding: 15px;
      border-radius: var(--border-radius);
      margin-bottom: 15px;
      border-top: 4px solid var(--primary);
    }

    .date-selector {
      display: flex;
      justify-content: center;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }

    .date-input-group {
      display: flex;
      flex-direction: column;
      min-width: 180px;
    }

    .loading-indicator {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10;
      border-radius: var(--border-radius);
    }

    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .chartjs-tooltip {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      padding: 8px;
      pointer-events: none;
      z-index: 100;
    }

    .chartjs-tooltip-date {
      font-weight: bold;
      margin-bottom: 3px;
      color: var(--primary-dark);
      font-size: 0.85rem;
    }

    .chartjs-tooltip-item {
      display: flex;
      align-items: center;
      font-size: 0.8rem;
      margin-top: 3px;
    }

    .chartjs-tooltip-color {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 5px;
    }

    .reserva-badge {
      background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
      color: white;
      padding: 3px 10px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      display: inline-block;
      margin-left: 10px;
    }

    @media (max-width: 992px) {
      .header-section {
        grid-template-columns: auto 1fr auto;
      }

      .title-container {
        grid-column: 2;
        text-align: center;
      }

      h1 {
        font-size: 1.3rem;
      }

      .chart-controls {
        flex-wrap: wrap;
        justify-content: flex-end;
      }
    }

    @media (max-width: 768px) {
      .form-section {
        padding: 10px;
      }

      .chart-container {
        height: 240px;
        padding: 10px;
      }

      h1 {
        font-size: 1.2rem;
      }

      .btn-success,
      .btn-primary,
      .refresh-all-btn {
        width: 100%;
      }

      .card-dark .main-value {
        font-size: 1.1rem;
      }

      .chart-control-group {
        padding: 5px 8px;
      }

      .chart-select {
        min-width: 100px;
        font-size: 0.85rem;
      }

      .date-input-group {
        min-width: 100%;
      }

      .chart-info-panel {
        flex-direction: column;
        gap: 5px;
      }

      .charts-grid {
        grid-template-columns: 1fr;
      }

      .corner-logo {
        position: static;
        height: auto;
        margin-bottom: 10px;
        justify-content: center;
      }

      .header-section {
        grid-template-columns: 1fr;
        text-align: center;
        padding: 15px 10px;
      }

      .title-container {
        grid-column: 1;
        margin: 10px 0;
      }

      .size-slider {
        max-width: 100px;
      }
      
      .top-left, .top-right {
        position: relative;
        top: auto;
        left: auto;
        right: auto;
        margin: 10px auto;
      }
    }

    @media (max-width: 576px) {
      h1 {
        font-size: 1.1rem;
      }

      .subtitle {
        font-size: 0.85rem;
      }

      .chart-container {
        height: 220px;
        padding: 8px;
      }

      .card-dark {
        min-height: 70px;
        padding: 10px;
      }

      .chart-controls {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }

      .chart-control-group {
        width: 100%;
        justify-content: space-between;
      }

      .chart-info-panel {
        flex-wrap: wrap;
        gap: 5px;
      }

      .logo {
        max-height: 250px;
      }

      .size-slider {
        max-width: 80px;
      }
      
      .date-selector {
        flex-direction: column;
        gap: 10px;
      }
      
      .download-control-group {
        min-width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="app-container">
    <div class="app-overlay">
      <div class="header-section">
        <div class="corner-logo top-left">
          <img src="https://koha.unl.edu.ec/images/logo_negro.png" class="logo"
            alt="Fundación Jocotoco" />
        </div>

        <div class="title-container">
          <h1>Estación Meteorológica <span class="reserva-badge">Reserva Tapichalaca</span></h1>
          <div class="subtitle">Monitoreo en tiempo real de variables climáticas</div>
          <div class="subtitle">Fundación Jocotoco - Conservación de Aves y Biodiversidad</div>
        </div>

        <div class="corner-logo top-right">
          <img src="https://unl.edu.ec/sites/default/files/inline-images/logo%20citiab%202%20%281%29.png" class="logo"
            alt="Logo CITIAB" />
        </div>
      </div>

      <div class="header-section" style="background: white; border: none; padding: 10px;">
        <div></div>
        <button class="refresh-all-btn" id="refreshAllBtn">
          <i class="bi bi-arrow-repeat"></i> Actualizar Datos
        </button>
      </div>

      <div class="data-cards">
        <div class="card-dark active" data-var="airTC">
          <i class="bi bi-thermometer-half icon"></i>
          <div class="main-value">--°C</div>
          <div class="card-label">Temperatura del Aire</div>
          <div class="card-time">--:--</div>
        </div>

        <div class="card-dark" data-var="rh">
          <i class="bi bi-droplet icon"></i>
          <div class="main-value">--%</div>
          <div class="card-label">Humedad Relativa</div>
          <div class="card-time">--:--</div>
        </div>

        <div class="card-dark" data-var="lluvia">
          <i class="bi bi-cloud-rain icon"></i>
          <div class="main-value">-- mm</div>
          <div class="card-label">Precipitación</div>
          <div class="card-time">--:--</div>
        </div>

        <div class="card-dark" data-var="slrW">
          <i class="bi bi-brightness-high icon"></i>
          <div class="main-value">-- W/m²</div>
          <div class="card-label">Radiación Solar</div>
          <div class="card-time">--:--</div>
        </div>
      </div>

      <div class="date-selector-container">
        <div class="date-selector">
          <div class="date-input-group">
            <label for="startDate" class="form-label">Fecha de inicio:</label>
            <input type="date" id="startDate" class="form-control" min="2025-07-09" />
          </div>

          <div class="date-input-group">
            <label for="endDate" class="form-label">Fecha de fin:</label>
            <input type="date" id="endDate" class="form-control" min="2025-07-09" />
          </div>

          <div class="download-control-group">
            <label class="download-label">Intervalo para descarga:</label>
            <select id="downloadIntervalSelect" class="download-select">
              <option value="1min">1 minuto (datos crudos)</option>
              <option value="5min">5 minutos</option>
              <option value="15min">15 minutos</option>
              <option value="30min">30 minutos</option>
              <option value="60min">60 minutos</option>
              <option value="daily">Diario</option>
            </select>
          </div>

          <div class="download-control-group">
            <label class="download-label">Formato de archivo:</label>
            <select id="fileFormatSelect" class="download-select">
              <option value="xlsx">Excel (.xlsx)</option>
              <option value="csv">CSV (.csv)</option>
            </select>
          </div>

          <div class="d-flex align-items-end mt-2">
            <button class="btn btn-success btn-sm px-3 py-2" id="downloadRangeBtn">
              <i class="bi bi-download"></i> Descargar Datos
            </button>
          </div>
        </div>

        <div class="info-note">*Datos disponibles desde 9 de julio 2025</div>
        <div class="date-warning" id="dateWarning">
          <strong>Nota:</strong> Para obtener todos los datos del rango seleccionado, asegúrese de seleccionar fechas
          válidas. El sistema descargará automáticamente todas las mediciones disponibles para el período seleccionado.
        </div>
      </div>

      <div class="chart-header">
        <div class="chart-title">Datos en Tiempo Real</div>
        <div class="chart-controls">
          <div class="chart-control-group">
            <span class="chart-control-label">
              <i class="bi bi-calendar"></i> Seleccione fecha:
            </span>
            <input type="date" id="chartDatePicker" class="chart-date-picker" />
          </div>
        </div>
      </div>

      <div class="charts-grid">
        <div class="chart-item">
          <div class="chart-item-header">
            <div class="chart-item-title">
              <i class="bi bi-thermometer-half" style="color: var(--temp-color);"></i>
              Temperatura del Aire (°C)
            </div>
          </div>
          <div class="size-control">
            <span class="size-label">Altura:</span>
            <input type="range" min="200" max="350" value="280" class="size-slider" data-chart="tempChart">
            <span class="size-value">280px</span>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container" id="tempChartContainer" style="height: 280px;">
              <canvas id="tempChart"></canvas>
            </div>
          </div>
          <div class="chart-info-panel">
            <div class="chart-stat max">
              <i class="bi bi-arrow-up"></i> Máx: <span id="maxValueTemp" class="stat-value">--</span>
              <span class="stat-date" id="maxDateTemp">--:--</span>
            </div>
            <div class="chart-stat min">
              <i class="bi bi-arrow-down"></i> Mín: <span id="minValueTemp" class="stat-value">--</span>
              <span class="stat-date" id="minDateTemp">--:--</span>
            </div>
            <div class="chart-stat avg">
              <i class="bi bi-dash-lg"></i> Prom: <span id="avgValueTemp" class="stat-value">--</span>
            </div>
          </div>
        </div>

        <div class="chart-item">
          <div class="chart-item-header">
            <div class="chart-item-title">
              <i class="bi bi-droplet" style="color: var(--hum-color);"></i>
              Humedad Relativa (%)
            </div>
          </div>
          <div class="size-control">
            <span class="size-label">Altura:</span>
            <input type="range" min="200" max="350" value="280" class="size-slider" data-chart="humChart">
            <span class="size-value">280px</span>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container" id="humChartContainer" style="height: 280px;">
              <canvas id="humChart"></canvas>
            </div>
          </div>
          <div class="chart-info-panel">
            <div class="chart-stat max">
              <i class="bi bi-arrow-up"></i> Máx: <span id="maxValueHum" class="stat-value">--</span>
              <span class="stat-date" id="maxDateHum">--:--</span>
            </div>
            <div class="chart-stat min">
              <i class="bi bi-arrow-down"></i> Mín: <span id="minValueHum" class="stat-value">--</span>
              <span class="stat-date" id="minDateHum">--:--</span>
            </div>
            <div class="chart-stat avg">
              <i class="bi bi-dash-lg"></i> Prom: <span id="avgValueHum" class="stat-value">--</span>
            </div>
          </div>
        </div>

        <div class="chart-item">
          <div class="chart-item-header">
            <div class="chart-item-title">
              <i class="bi bi-cloud-rain" style="color: var(--prec-color);"></i>
              Precipitación (mm)
            </div>
          </div>
          <div class="size-control">
            <span class="size-label">Altura:</span>
            <input type="range" min="200" max="350" value="280" class="size-slider" data-chart="precChart">
            <span class="size-value">280px</span>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container" id="precChartContainer" style="height: 280px;">
              <canvas id="precChart"></canvas>
            </div>
          </div>
          <div class="chart-info-panel">
            <div class="chart-stat max">
              <i class="bi bi-arrow-up"></i> Máx: <span id="maxValuePrec" class="stat-value">--</span>
              <span class="stat-date" id="maxDatePrec">--:--</span>
            </div>
            <div class="chart-stat min">
              <i class="bi bi-arrow-down"></i> Mín: <span id="minValuePrec" class="stat-value">--</span>
              <span class="stat-date" id="minDatePrec">--:--</span>
            </div>
            <div class="chart-stat avg">
              <i class="bi bi-dash-lg"></i> Prom: <span id="avgValuePrec" class="stat-value">--</span>
            </div>
            <div class="chart-stat total">
              <i class="bi bi-plus-circle"></i> Total: <span id="totalValuePrec" class="stat-value">--</span>
            </div>
          </div>
        </div>

        <div class="chart-item">
          <div class="chart-item-header">
            <div class="chart-item-title">
              <i class="bi bi-brightness-high" style="color: var(--rad-color);"></i>
              Radiación Solar (W/m²)
            </div>
          </div>
          <div class="size-control">
            <span class="size-label">Altura:</span>
            <input type="range" min="200" max="350" value="280" class="size-slider" data-chart="radChart">
            <span class="size-value">280px</span>
          </div>
          <div class="chart-wrapper">
            <div class="chart-container" id="radChartContainer" style="height: 280px;">
              <canvas id="radChart"></canvas>
            </div>
          </div>
          <div class="chart-info-panel">
            <div class="chart-stat max">
              <i class="bi bi-arrow-up"></i> Máx: <span id="maxValueRad" class="stat-value">--</span>
              <span class="stat-date" id="maxDateRad">--:--</span>
            </div>
            <div class="chart-stat min">
              <i class="bi bi-arrow-down"></i> Mín: <span id="minValueRad" class="stat-value">--</span>
              <span class="stat-date" id="minDateRad">--:--</span>
            </div>
            <div class="chart-stat avg">
              <i class="bi bi-dash-lg"></i> Prom: <span id="avgValueRad" class="stat-value">--</span>
            </div>
          </div>
        </div>
      </div>

      <div class="time-indicator">Última actualización: --:--:--</div>
      <div class="footer">© 2025 - Powered by CITIAB UNL & Fundación Jocotoco</div>
    </div>
  </div>

  <script type="module">
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

    // ==================== ACTUALIZACIÓN DE CREDENCIALES Y TABLA ====================
    const supabase = createClient(
      'https://ecuossvqnlodykbgemqh.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjdW9zc3ZxbmxvZHlrYmdlbXFoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk3NDQzMDMsImV4cCI6MjA2NTMyMDMwM30.aCVFkPpjdf2KR4M8Qjd3JT_ieuIG5YMtM-2UmBxKYBQ'
    );
    const TABLE_NAME = 'tapichalaca';

    // Función para crear fecha en zona horaria local
    function createLocalDate(year, month, day) {
      return new Date(year, month - 1, day);
    }

    // Función para formatear fecha a YYYY-MM-DD en zona local
    function formatLocalDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    // Función para mostrar fecha en formato local
    function displayLocalDate(date) {
      return date.toLocaleDateString('es-EC', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    }

    // FUNCIÓN PARA FORMATEAR TIEMPO SIN CAMBIAR ZONA HORARIA
    function formatUTCTimestamp(isoString) {
      if (!isoString) return '';
      const date = new Date(isoString);
      if (isNaN(date)) return isoString;

      // Obtener componentes UTC sin conversión
      const year = date.getUTCFullYear();
      const month = String(date.getUTCMonth() + 1).padStart(2, '0');
      const day = String(date.getUTCDate()).padStart(2, '0');
      const hours = String(date.getUTCHours()).padStart(2, '0');
      const minutes = String(date.getUTCMinutes()).padStart(2, '0');
      const seconds = String(date.getUTCSeconds()).padStart(2, '0');

      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    const variableColors = {
      airTC: '#e76f51',
      lluvia: '#457b9d',
      rh: '#2a9d8f',
      slrW: '#e9c46a'
    };

    const variableMeta = {
      airTC: {
        label: "Temperatura del Aire",
        unit: "°C",
        icon: "bi-thermometer-half",
        color: variableColors.airTC
      },
      lluvia: {
        label: "Precipitación",
        unit: "mm",
        icon: "bi-cloud-rain",
        color: variableColors.lluvia
      },
      rh: {
        label: "Humedad Relativa",
        unit: "%",
        icon: "bi-droplet",
        color: variableColors.rh
      },
      slrW: {
        label: "Radiación Solar",
        unit: "W/m²",
        icon: "bi-brightness-high",
        color: variableColors.slrW
      }
    };

    // Crear las 4 gráficas
    const tempCtx = document.getElementById('tempChart').getContext('2d');
    const humCtx = document.getElementById('humChart').getContext('2d');
    const precCtx = document.getElementById('precChart').getContext('2d');
    const radCtx = document.getElementById('radChart').getContext('2d');

    // Función para crear gráficas con ejes horarios
    function createChart(ctx, color, label) {
      return new Chart(ctx, {
        type: 'line',
        data: {
          labels: Array(24).fill().map((_, i) => `${i.toString().padStart(2, '0')}:00`),
          datasets: [{
            label: label,
            data: Array(24).fill(null),
            borderColor: color,
            backgroundColor: color + '33',
            borderWidth: 3,
            pointRadius: 4,
            pointHoverRadius: 7,
            fill: false,
            tension: 0.3,
            cubicInterpolationMode: 'monotone'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: 'rgba(255, 255, 255, 0.95)',
              titleColor: '#2c6e49',
              bodyColor: '#333',
              borderColor: 'rgba(0, 0, 0, 0.05)',
              borderWidth: 1,
              padding: 10,
              displayColors: true,
              callbacks: {
                title: function (tooltipItems) {
                  return tooltipItems[0].label;
                },
                label: function (context) {
                  return `${context.dataset.label}: ${context.parsed.y !== null ? context.parsed.y.toFixed(2) : 'N/A'}`;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: true,
                color: 'rgba(0, 0, 0, 0.03)'
              },
              title: {
                display: true,
                text: 'Hora del día',
                color: '#588157',
                font: { weight: 600, size: 11 }
              },
              ticks: {
                color: '#7f8c8d',
                font: { size: 9 },
                maxRotation: 0,
                minRotation: 0,
                padding: 5,
                callback: function (value, index) {
                  // Mostrar todas las horas
                  return value;
                }
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(0, 0, 0, 0.03)',
                borderDash: [4, 4]
              },
              title: {
                display: true,
                text: 'Valor',
                color: '#588157',
                font: { weight: 600, size: 11 }
              },
              ticks: {
                color: '#95a5a6',
                font: { size: 9 },
                padding: 4,
                callback: function (value) {
                  return value;
                }
              }
            }
          },
          interaction: {
            intersect: false,
            mode: 'index'
          },
          animation: {
            duration: 800,
            easing: 'easeOutQuart'
          },
          layout: {
            padding: {
              bottom: 10,
              left: 5,
              right: 5
            }
          }
        }
      });
    }

    const tempChart = createChart(tempCtx, variableColors.airTC, 'Temperatura del Aire (°C)');
    const humChart = createChart(humCtx, variableColors.rh, 'Humedad Relativa (%)');
    const precChart = createChart(precCtx, variableColors.lluvia, 'Precipitación (mm)');
    const radChart = createChart(radCtx, variableColors.slrW, 'Radiación Solar (W/m²)');

    let chartData = [];
    let selectedDate = new Date();
    selectedDate.setHours(0, 0, 0, 0);

    // Actualizar título de la gráfica
    function updateChartTitle() {
      const dateStr = displayLocalDate(selectedDate);
      document.querySelector('.chart-title').textContent = `Datos del día: ${dateStr}`;
    }

    // Actualizar tarjetas de datos
    async function updateDataCards() {
      try {
        const { data, error } = await supabase
          .from(TABLE_NAME)
          .select('*')
          .order('tiempo', { ascending: false })
          .limit(1);

        if (error) throw error;

        if (data && data.length > 0) {
          const latestData = data[0];

          document.querySelector('.card-dark:nth-child(1) .main-value').textContent = latestData.airTC.toFixed(2) + "°C";
          document.querySelector('.card-dark:nth-child(2) .main-value').textContent = latestData.Rh.toFixed(2) + "%";
          document.querySelector('.card-dark:nth-child(3) .main-value').textContent = latestData.lluvia.toFixed(2) + " mm";
          document.querySelector('.card-dark:nth-child(4) .main-value').textContent = latestData.slrw.toFixed(2) + " W/m²";

          document.querySelectorAll('.card-time').forEach(el => {
            el.textContent = latestData.hora ? latestData.hora.substring(0, 5) : '--:--';
          });

          updateIconAnimations(latestData);

          const now = new Date();
          document.querySelector('.time-indicator').textContent =
            `Última actualización: ${now.toLocaleTimeString('es-EC')}`;
        }
      } catch (error) {
        console.error('Error al obtener datos:', error);
      }
    }

    // Actualizar animaciones de íconos
    function updateIconAnimations(data) {
      const tempIcon = document.querySelector('.card-dark:nth-child(1) .icon');
      const tempSpeed = 2 - (data.airTC / 40);
      tempIcon.style.animation = `pulse ${Math.max(0.5, Math.min(2, tempSpeed))}s infinite`;

      const humIcon = document.querySelector('.card-dark:nth-child(2) .icon');
      const humSpeed = 3 - (data.Rh / 50);
      humIcon.style.animation = `droplet ${Math.max(1, Math.min(3, humSpeed))}s infinite`;

      const precIcon = document.querySelector('.card-dark:nth-child(3) .icon');
      let precSpeed = 3;
      if (data.lluvia > 0) {
        precSpeed = 3 - (data.lluvia / 5);
        precIcon.style.animation = `rain ${Math.max(0.8, Math.min(3, precSpeed))}s infinite`;
      }

      const radIcon = document.querySelector('.card-dark:nth-child(4) .icon');
      const radSpeed = 3 - (data.slrw / 500);
      radIcon.style.animation = `shine ${Math.max(1, Math.min(3, radSpeed))}s infinite`;
    }

    // Actualizar gráfica con datos del día seleccionado
    async function updateChart() {
      updateChartTitle();

      try {
        const fechaStr = formatLocalDate(selectedDate);

        // Obtener datos para el día seleccionado usando el campo 'fecha'
        const { data, error } = await supabase
          .from(TABLE_NAME)
          .select('tiempo, fecha, hora, airTC, Rh, lluvia, slrw')
          .eq('fecha', fechaStr)
          .order('tiempo', { ascending: true });

        if (error) throw error;

        // Guardar datos
        chartData = data || [];

        // Preparar datos para las gráficas - interceptando el primer dato de cada hora
        const tempData = Array(24).fill(null);
        const humData = Array(24).fill(null);
        const precData = Array(24).fill(null);
        const radData = Array(24).fill(null);

        // Organizar datos por hora, tomando el primer valor encontrado para cada hora
        chartData.forEach(record => {
          const hour = parseInt(record.hora.substring(0, 2));
          if (hour >= 0 && hour <= 23) {
            if (tempData[hour] === null) {
              tempData[hour] = record.airTC;
            }
            if (humData[hour] === null) {
              humData[hour] = record.Rh;
            }
            // Precipitación: sumar todos los valores dentro de la hora
            precData[hour] = (precData[hour] || 0) + (record.lluvia || 0);

            if (radData[hour] === null) {
              radData[hour] = record.slrw;
            }
          }
        });

        // Actualizar cada gráfica
        updateSingleChart(tempChart, tempData);
        updateSingleChart(humChart, humData);
        updateSingleChart(precChart, precData);
        updateSingleChart(radChart, radData);

        // Actualizar estadísticas para cada variable
        updateChartStatsForVariable('airTC', chartData, 'Temp');
        updateChartStatsForVariable('Rh', chartData, 'Hum');
        updateChartStatsForVariable('lluvia', chartData, 'Prec');
        updateChartStatsForVariable('slrw', chartData, 'Rad');

        // Actualizar indicador de tiempo
        const now = new Date();
        document.querySelector('.time-indicator').textContent =
            `Última actualización: ${now.toLocaleTimeString('es-EC')}`;

      } catch (error) {
        console.error('Error al actualizar gráfico:', error);
      }
    }

    function updateSingleChart(chart, data) {
      chart.data.datasets[0].data = data;
      chart.update();
    }

    // FUNCIÓN MODIFICADA PARA MOSTRAR SOLO HORA EN MÁXIMOS Y MÍNIMOS
    function updateChartStatsForVariable(variable, data, suffix) {
      if (!data || data.length === 0) {
        document.getElementById(`maxValue${suffix}`).textContent = '--';
        document.getElementById(`minValue${suffix}`).textContent = '--';
        document.getElementById(`avgValue${suffix}`).textContent = '--';
        document.getElementById(`maxDate${suffix}`).textContent = '--:--';
        document.getElementById(`minDate${suffix}`).textContent = '--:--';
        if (suffix === 'Prec') {
          document.getElementById(`totalValue${suffix}`).textContent = '--';
        }
        return;
      }

      const values = data.map(d => d[variable]);
      const max = Math.max(...values);
      const min = Math.min(...values);
      const avg = values.reduce((a, b) => a + b, 0) / values.length;

      // Encontrar registros para max y min
      const maxRecord = data.find(d => d[variable] === max);
      const minRecord = data.find(d => d[variable] === min);

      document.getElementById(`maxValue${suffix}`).textContent = max.toFixed(2);
      document.getElementById(`minValue${suffix}`).textContent = min.toFixed(2);
      document.getElementById(`avgValue${suffix}`).textContent = avg.toFixed(2);

      // Formatear solo la hora (HH:MM) para max y min
      const formatTime = (record) => {
        if (!record || !record.hora) return '--:--';
        return record.hora.substring(0, 5);
      };

      document.getElementById(`maxDate${suffix}`).textContent = formatTime(maxRecord);
      document.getElementById(`minDate${suffix}`).textContent = formatTime(minRecord);

      // Calcular suma total solo para precipitación
      if (suffix === 'Prec') {
        const total = values.reduce((a, b) => a + b, 0);
        document.getElementById(`totalValue${suffix}`).textContent = total.toFixed(2) + " mm";
      }
    }

    // Función para agrupar datos por intervalo
    function groupDataByInterval(data, interval) {
      if (interval === '1min') return data;

      let intervalMs;
      switch (interval) {
        case '5min': intervalMs = 5 * 60 * 1000; break;
        case '15min': intervalMs = 15 * 60 * 1000; break;
        case '30min': intervalMs = 30 * 60 * 1000; break;
        case '60min': intervalMs = 60 * 60 * 1000; break;
        case 'daily': intervalMs = 24 * 60 * 60 * 1000; break;
        default: intervalMs = 5 * 60 * 1000;
      }

      const groupedData = [];
      let currentGroup = [];
      let currentIntervalStart = null;

      data.forEach(record => {
        const recordTime = new Date(record.tiempo).getTime();

        if (!currentIntervalStart) {
          currentIntervalStart = recordTime;
        }

        if (recordTime < currentIntervalStart + intervalMs) {
          currentGroup.push(record);
        } else {
          if (currentGroup.length > 0) {
            groupedData.push(aggregateGroup(currentGroup));
            currentGroup = [record];
            currentIntervalStart = recordTime;
          }
        }
      });

      // Procesar el último grupo
      if (currentGroup.length > 0) {
        groupedData.push(aggregateGroup(currentGroup));
      }

      return groupedData;
    }

    // Función para agregar datos del grupo
    function aggregateGroup(group) {
      const fecha = group[0].fecha;
      const hora = group[0].hora;

      return {
        tiempo: group[0].tiempo,
        fecha,
        hora,
        airTC: calculateAverage(group, 'airTC'),
        lluvia: calculateSum(group, 'lluvia'),
        Rh: calculateAverage(group, 'Rh'),
        slrw: calculateAverage(group, 'slrw')
      };
    }

    // Calcular promedio
    function calculateAverage(data, key) {
      const values = data.map(d => d[key]).filter(val => val !== null);
      return values.length ? (values.reduce((a, b) => a + b, 0) / values.length) : 0;
    }

    // Calcular suma
    function calculateSum(data, key) {
      return data.reduce((sum, d) => sum + (d[key] || 0), 0);
    }

    // FUNCIÓN PARA DESCARGAR DATOS POR RANGO DE FECHAS
    const downloadRangeData = async () => {
      const btn = document.getElementById('downloadRangeBtn');
      const originalText = btn.innerHTML;
      btn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> Procesando...';
      btn.disabled = true;

      const dateWarning = document.getElementById('dateWarning');
      dateWarning.classList.add('show');

      try {
        // Obtener fechas seleccionadas
        const startDateValue = document.getElementById('startDate').value;
        const endDateValue = document.getElementById('endDate').value;

        // Validar fechas
        if (!startDateValue || !endDateValue) {
          throw new Error('Por favor seleccione ambas fechas');
        }

        if (startDateValue > endDateValue) {
          throw new Error('La fecha de inicio no puede ser posterior a la fecha de fin');
        }

        // Validar que las fechas no sean futuras
        const today = new Date();
        const todayStr = formatLocalDate(today);

        if (startDateValue > todayStr || endDateValue > todayStr) {
          throw new Error('No puede seleccionar fechas futuras');
        }

        // Validar que las fechas no sean anteriores al 9 de julio de 2025
        if (startDateValue < '2025-07-09' || endDateValue < '2025-07-09') {
          throw new Error('No hay datos disponibles antes del 9 de julio de 2025');
        }

        // Obtener intervalo seleccionado para descarga
        const interval = document.getElementById('downloadIntervalSelect').value;
        const fileFormat = document.getElementById('fileFormatSelect').value;

        // Obtener todos los datos para el rango de fechas
        let allData = [];
        let page = 0;
        const pageSize = 1000;
        let hasMoreData = true;

        while (hasMoreData) {
          const { data, error } = await supabase
            .from(TABLE_NAME)
            .select('tiempo, fecha, hora, airTC, lluvia, Rh, slrw')
            .gte('fecha', startDateValue)
            .lte('fecha', endDateValue)
            .order('fecha', { ascending: true })
            .order('hora', { ascending: true })
            .range(page * pageSize, (page + 1) * pageSize - 1);

          if (error) throw error;

          if (!data || data.length === 0) break;

          allData = [...allData, ...data];

          if (data.length < pageSize) {
            hasMoreData = false;
          } else {
            page++;
          }
        }

        if (allData.length === 0) {
          return alert('No hay datos disponibles para el rango seleccionado');
        }

        // Agrupar datos según el intervalo seleccionado
        let processedData;
        if (interval === '1min') {
          processedData = allData;
        } else {
          processedData = groupDataByInterval(allData, interval);
        }

        // Preparar datos para exportación
        const headers = [
          'Fecha y Hora en la que se almacena', 'Fecha Sensor', 'Hora Sensor',
          'Temperatura (°C)', 'Precipitación (mm)', 'Humedad (%)', 'Radiación (W/m²)'
        ];

        const rows = processedData.map(d => [
          formatUTCTimestamp(d.tiempo),
          d.fecha,
          d.hora,
          d.airTC ? d.airTC.toFixed(2) : '',
          d.lluvia ? d.lluvia.toFixed(2) : '0.00',
          d.Rh ? d.Rh.toFixed(2) : '',
          d.slrw ? d.slrw.toFixed(2) : ''
        ]);

        // Crear hoja de cálculo
        const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);

        // Formatear encabezados
        headers.forEach((header, index) => {
          const cellAddress = XLSX.utils.encode_cell({ r: 0, c: index });
          if (ws[cellAddress]) {
            ws[cellAddress].s = { font: { bold: true } };
          }
        });

        // Ajustar ancho de columnas
        ws['!cols'] = [
          { wch: 33 },
          { wch: 15 },
          { wch: 15 },
          { wch: 20 },
          { wch: 20 },
          { wch: 15 },
          { wch: 18 }
        ];

        // Crear y descargar archivo
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Datos Meteorológicos');

        // Nombre del archivo
        const fileName = `Datos_Meteorologicos_Tapichalaca_${startDateValue}_a_${endDateValue}_${interval}`;

        if (fileFormat === 'xlsx') {
          XLSX.writeFile(wb, `${fileName}.xlsx`);
        } else {
          // Exportar como CSV
          const csv = XLSX.utils.sheet_to_csv(ws);
          const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.download = `${fileName}.csv`;
          link.click();
        }

      } catch (error) {
        alert('Error al descargar: ' + error.message);
      } finally {
        btn.innerHTML = originalText;
        btn.disabled = false;
        setTimeout(() => dateWarning.classList.remove('show'), 5000);
      }
    };

    // Función para ajustar el tamaño de un gráfico
    function adjustChartSize(chartId, size) {
      const container = document.getElementById(`${chartId}Container`);
      container.style.height = `${size}px`;
      const chart = {
        'tempChart': tempChart,
        'humChart': humChart,
        'precChart': precChart,
        'radChart': radChart
      }[chartId];
      chart.resize();
      chart.update();
      container.querySelector('.size-value').textContent = `${size}px`;
    }

    // Event listeners para los controles deslizantes
    document.querySelectorAll('.size-slider').forEach(slider => {
      slider.addEventListener('input', function () {
        const chartId = this.getAttribute('data-chart');
        const size = this.value;
        adjustChartSize(chartId, size);
      });
    });

    // Event listeners
    document.getElementById('downloadRangeBtn').addEventListener('click', downloadRangeData);

    document.getElementById('refreshAllBtn').addEventListener('click', async () => {
      const btn = document.getElementById('refreshAllBtn');
      const originalText = btn.innerHTML;
      btn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> Actualizando...';

      try {
        await updateDataCards();
        await updateChart();
      } catch (error) {
        console.error('Error al actualizar todo:', error);
      } finally {
        btn.innerHTML = originalText;
      }
    });

    // Event listener para el selector de fecha de la gráfica
    document.getElementById('chartDatePicker').addEventListener('change', function () {
      const dateString = this.value;
      if (!dateString) return;

      const [year, month, day] = dateString.split('-').map(Number);
      selectedDate = new Date(year, month - 1, day);

      updateChart();
    });

    async function initApp() {
      // Inicializar fechas
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const todayStr = formatLocalDate(today);
      const minDate = '2025-07-09';

      document.getElementById('startDate').value = minDate;
      document.getElementById('endDate').value = todayStr;
      document.getElementById('chartDatePicker').value = todayStr;

      document.getElementById('startDate').min = minDate;
      document.getElementById('startDate').max = todayStr;
      document.getElementById('endDate').min = minDate;
      document.getElementById('endDate').max = todayStr;
      document.getElementById('chartDatePicker').min = minDate;
      document.getElementById('chartDatePicker').max = todayStr;

      // Usar la fecha actual como predeterminada
      selectedDate = today;

      updateChartTitle();
      await updateDataCards();
      await updateChart();
      setInterval(updateDataCards, 60000);
      setInterval(updateChart, 300000);
    }

    initApp();

    const style = document.createElement('style');
    style.innerHTML = `
      .spin {
        animation: spin 1s linear infinite;
        display: inline-block;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Animaciones personalizadas para íconos */
      @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
      }
      
      @keyframes droplet {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(3px); }
      }
      
      @keyframes rain {
        0%, 100% { transform: rotate(0); }
        25% { transform: rotate(5deg); }
        75% { transform: rotate(-5deg); }
      }
      
      @keyframes shine {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
      }
    `;
    document.head.appendChild(style);
  </script>
</body>

</html>
